import { useEffect, useState } from "react";
import "./App.css";
import "antd/dist/antd.css";
import { Todo } from "./types/Todo";
import { ModalTodo } from "./components/ModalTodo";
import { ModalFoto } from "./components/ModalFoto";
import TodoList from "./components/TodoList";
import { getTodos } from "./redux/features/todoSlice";
import { useSelector, useDispatch } from "react-redux";

function App() {
  const BD = "http://localhost:8080/todos";
  const [todos, setTodos] = useState<any>();
  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
  const [isFotoModalVisible, setIsFotoModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [description, setDescription] = useState("");
  const [status, setStatus] = useState("Pendente");
  const [photo, setPhoto] = useState("");
  const [fetchData, setFetchData] = useState(false);
  const [modalImage, setModalImage] = useState(-1);
  const [itemToEdit, setItemToEdit] = useState(-1);
  const dispatch = useDispatch();
  const { app } = useSelector((state) => state);

  useEffect(() => {
    const fetchBd = async () => {
      try {
        // const response: Todo = await fetch(BD).then((data) => data.json());
        const response = dispatch(getTodos());
        console.log(app.todos);
        // setTodos(response);
      } catch (error) {
        alert(error);
      }
    };
    fetchBd();
  }, [dispatch]);

  const resetData = () => {
    URL.revokeObjectURL(photo);
    setPhoto("");
    setDescription("");
    setStatus("Pendente");
  };

  const showCreateModal = () => {
    setIsCreateModalVisible(!isFotoModalVisible);
  };

  const closeCreateModal = () => {
    setIsCreateModalVisible(false);
    resetData();
  };

  const showFotoModal = (index: number) => {
    setIsFotoModalVisible(!isFotoModalVisible);
    setModalImage(index);
  };
  const closeFotoModal = () => {
    setIsFotoModalVisible(false);
  };

  const editTodo = (id: number) => {
    setDescription({ todos }.todos[id].tarefa);
    setStatus({ todos }.todos[id].status);
    setPhoto({ todos }.todos[id].foto);
    setIsEditModalVisible(!isEditModalVisible);
    setItemToEdit(id);
  };

  const closeEditModal = () => {
    setIsEditModalVisible(false);
    resetData();
  };

  async function addImage(e: React.ChangeEvent<HTMLInputElement>) {
    const target = e.target as HTMLInputElement;
    const file = target.files![0];
    if (file) {
      setPhoto(URL.createObjectURL(file));
      const base64: any = await convertToBase64(file);
      setPhoto(base64);
    }
    return;
  }
  const convertToBase64 = (file: Blob) => {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);
      fileReader.onload = () => {
        resolve(fileReader.result);
      };
      fileReader.onerror = (error) => {
        reject(error);
      };
    });
  };

  const handleCreate = async () => {
    if (description == "") {
      alert("A descrição é obrigatória!");
    } else {
      let data = {
        tarefa: description,
        status: status,
        foto: photo,
      };

      try {
        await fetch(BD, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
        setFetchData(true);
      } catch (error) {
        alert(error);
      }
      setFetchData(!fetchData);
      setIsCreateModalVisible(false);
      resetData();
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await fetch(`${BD}/${id}`, {
        method: "DELETE",
      });
    } catch (error) {
      alert(error);
    }
    setFetchData(!fetchData);
  };

  const handleFinish = async (todo: Todo) => {
    try {
      let data = {
        tarefa: todo.tarefa,
        status: "Finalizada",
        foto: todo.foto,
      };

      await fetch(`${BD}/${todo.id}`, {
        method: "PUT",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
    } catch (error) {
      alert(error);
    }
    setFetchData(!fetchData);
    setStatus("Pendente");
  };

  const handleEdit = async () => {
    if (description == "") {
      alert("A descrição é obrigatória!");
    } else {
      try {
        let data = {
          tarefa: description,
          status: status,
          foto: photo,
        };

        await fetch(`${BD}/${todos[itemToEdit].id}`, {
          method: "PUT",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
        setIsEditModalVisible(false);
      } catch (error) {
        console.log(error);
      }
      setFetchData(!fetchData);
      resetData();

      setStatus("Pendente");
    }
  };

  return (
    <>
      <TodoList
        todos={todos}
        showCreateModal={showCreateModal}
        showFotoModal={showFotoModal}
        editTodo={editTodo}
        handleFinish={handleFinish}
        handleDelete={handleDelete}
      />

      <ModalTodo
        title="Criar nova tarefa"
        description={description}
        setDescription={setDescription}
        photo={photo}
        setPhoto={setPhoto}
        status={status}
        setStatus={setStatus}
        addImage={addImage}
        onCancel={closeCreateModal}
        onOk={handleCreate}
        visible={isCreateModalVisible}
      />

      <ModalTodo
        title="Editar tarefa"
        description={description}
        setDescription={setDescription}
        status={status}
        setStatus={setStatus}
        photo={photo}
        setPhoto={setPhoto}
        addImage={addImage}
        onCancel={closeEditModal}
        onOk={handleEdit}
        visible={isEditModalVisible}
      />

      <ModalFoto
        title="Foto da tarefa"
        todos={todos}
        modalImage={modalImage}
        onCancel={closeFotoModal}
        visible={isFotoModalVisible}
      />
    </>
  );
}

export default App;
